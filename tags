!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Filter	src/main.rs	/^impl Filter {$/;"	i
Filter	src/main.rs	/^struct Filter {$/;"	T
USAGE	src/main.rs	/^const USAGE: &str = "Usage: ziputil command zipfile [query...]$/;"	c
anymatch	src/main.rs	/^    fn anymatch(&self, string: &str) -> bool {$/;"	f
choose_from_vector	src/main.rs	/^fn choose_from_vector(vector: &[String]) -> Vec<String> {$/;"	f
display_files	src/main.rs	/^fn display_files(zipfile: &str, names: &[String]) -> anyhow::Result<()> {$/;"	f
extract_files	src/main.rs	/^fn extract_files(zipfile: &str, names: &[String], outdir: &Path) -> anyhow::Result<()> {$/;"	f
fuzzymatch	src/main.rs	/^    fn fuzzymatch(&self, string: &str) -> bool {$/;"	f
get_matches	src/main.rs	/^fn get_matches(zipfile: &str, filter: Filter) -> anyhow::Result<Vec<String>> {$/;"	f
get_number_choices	src/main.rs	/^fn get_number_choices() -> Vec<usize> {$/;"	f
main	src/main.rs	/^fn main() -> anyhow::Result<()> {$/;"	f
matches	src/main.rs	/^    pub fn matches(&self, string: &str) -> bool {$/;"	f
new	src/main.rs	/^    pub fn new(any: bool, ordered: bool, query: Vec<String>) -> Filter {$/;"	f
parse_range	src/main.rs	/^fn parse_range(s: &str) -> Vec<usize> {$/;"	f
read_from_stdin	src/main.rs	/^fn read_from_stdin(prompt: &str) -> String {$/;"	f
